Создание потока:
gameThread = new Thread(() -> {...}); — здесь создаётся новый поток с использованием лямбда-выражения.
Лямбда выражение (в данном случае () -> {...}) является сокращённой формой анонимного класса.
Вместо создания отдельного класса, который реализует интерфейс Runnable, мы можем использовать
лямбда для безымянного реализатора, который будет выполнять код внутри фигурных скобок.
Цикл while (OnOrOff):
Внутри потока мы видим while (OnOrOff), который будет выполняться, пока переменная OnOrOff равна true.
Это условие позволяет контролировать, когда игровая логика должна выполняться.
В этом цикле выводится сообщение "Игра запущена" каждую секунду.
Задержка с помощью Thread.sleep(1000):
Внутри цикла имеется задержка Thread.sleep(1000), которая приостанавливает выполнение этого потока на 1000 миллисекунд
(или 1 секунду). Это позволяет уменьшить частоту вывода сообщения и избежать его непрерывного отображения в консоли.
Обработка прерываний:
Блок try-catch обрабатывает возможное исключение InterruptedException, которое может возникнуть, если текущий поток
был прерван во время ожидания. В случае возникновения этого исключения, вызванная строка Thread.currentThread().interrupt();
восстанавливает состояние прерывания текущего потока. Это важно для корректного завершения потоков в Java.